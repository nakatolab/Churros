#!/bin/bash
cmdname=`basename $0`
function usage()
{
    echo "$cmdname [Options] <samplelist> <samplepairlist> <build>" 1>&2
    echo '   <samplelist>: text file of samples' 1>&2
    echo '   <build>: genome build (e.g., hg38)' 1>&2
    echo '   Options:' 1>&2
    echo '      -o: output directory (defalt: "comparison")' 1>&2
    echo '      -d: peak direcoty (defalt: "macs")' 1>&2
    echo '      -n: do not consider genome mappability' 1>&2
    echo '      -D: directory for execution (defalt: "Churros_result")' 1>&2
    echo '      -p : number of CPUs (default: 8)' 1>&2
    echo '      -y <str>: param string of parse2wig+ files to be used (default: ".mpbl")' 1>&2
}

odir=comparison
chdir="Churros_result"
mp=1
post_predefined=""
mdir=macs
ncore=8

while getopts o:d:nD:p:y: option
do
    case ${option} in
        o) odir=${OPTARG};;
        d) mdir=${OPTARG};;
        n) mp=0;;
        D) chdir=${OPTARG};;
        p) ncore=${OPTARG}
           isnumber.sh $ncore "-p" || exit 1
           ;;
        y) post_predefined=${OPTARG};;
        *)
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -ne 3 ]; then
  usage
  exit 1
fi

samplelist=$1
samplepairlist=$2
build=$3

if test ! -e $samplelist; then
    echo "Error: $samplelist does not exist."
    exit 1
fi

if test ! -e $samplepairlist; then
    echo "Error: $samplepairlist does not exist."
    exit 1
fi

check_build.sh $build || exit 1
chdir=$chdir/$build

ex(){ echo $1; eval $1; }

odir=$chdir/`basename $odir`
mkdir -p $odir
mdir=$chdir/`basename $mdir`

if test "$post_predefined" = ""; then
    if test $mp -eq 1; then
        post=".mpbl"
    else
        post=""
    fi
else
    post=$post_predefined
fi

while read LINE; do
    LINE=($LINE)
    prefix=${LINE[0]}
    array="$array `ls $chdir/bigWig/TotalReadNormalized/$prefix$post.100.bw`"

    sample=`ls $chdir/bigWig/TotalReadNormalized/$prefix$post.100000.bw 2> /dev/null`
    if test "$sample" != ""; then array100k="$array100k $sample"; fi
done < $samplelist
echo $array100k

echo -en "churros bigWig comparison..."
deepdir=$odir/bigwigCorrelation
mkdir -p $deepdir

#if test -e "$odir/scatterplot_SpearmanCorr_bigwigScores.100bp.png" && test -e "$odir/heatmap_SpearmanCorr_readCounts.100bp.png"; then
#    echo "Heatmaps already exist. Skipping"
#else
    ofile=$deepdir/mergedbin.npz
    multiBigwigSummary bins -b $array -o $ofile
    convertlabel_deeptools_npz.py $ofile $deepdir/margedbin_renamed.npz $post.100.bw
    mv $deepdir/margedbin_renamed.npz $ofile

    param="--corMethod spearman --skipZeros -in $ofile"
    head=$deepdir/scatterplot_SpearmanCorr.100bp
    plotCorrelation $param --plotTitle "Spearman Correlation (100-bp bin)" --whatToPlot scatterplot \
                    -o $head.png --outFileCorMatrix $head.tab
    head=$deepdir/heatmap_SpearmanCorr.100bp
    plotCorrelation $param --plotTitle "Spearman Correlation (100-bp bin)" --whatToPlot heatmap --colorMap RdYlBu_r --plotNumbers \
                    -o $head.png --outFileCorMatrix $head.tab
    rm $ofile
#fi

if test "$array100k" != ""; then
 #   if test -e "$odir/scatterplot_SpearmanCorr.100kbp.png" && test -e "$odir/heatmap_SpearmanCorr_readCounts.100kbp.png"; then
 #       echo "Heatmaps already exist. Skipping"
 #   else
    ofile=$deepdir/mergedbin.100k.npz
    multiBigwigSummary bins -b $array100k -o $ofile
    convertlabel_deeptools_npz.py $ofile $deepdir/margedbin_renamed.npz $post.100000.bw
    mv $deepdir/margedbin_renamed.npz $ofile

    param="--corMethod spearman --skipZeros -in $ofile"
    head=$deepdir/scatterplot_SpearmanCorr.100kbp
    plotCorrelation $param --plotTitle "Spearman Correlation (100-kbp bin)" --whatToPlot scatterplot \
                    -o $head.png --outFileCorMatrix $head.tab
    head=$deepdir/heatmap_SpearmanCorr.100kbp
    plotCorrelation $param --plotTitle "Spearman Correlation (100-kbp bin)" --whatToPlot heatmap --colorMap RdYlBu_r --plotNumbers \
                    -o $head.png --outFileCorMatrix $head.tab
    rm $ofile
    #   fi
fi

# peak comparison
echo -en "churros base-pair lebel overlap of peaks..."
jacdir=$odir/Peak_BPlevel_overlap
mkdir -p $jacdir
peakarray=""
peaklist_simpson=""
while read LINE; do
    array="$array $LINE"

    LINE=(${LINE//,/ })
    chip=${LINE[0]}
    input=${LINE[1]}
    label=${LINE[2]}
    mode=${LINE[3]}
    if test "$mode" = ""; then
       mode="sharp"
    fi
    if test $mode = "sharp" -o $mode = "sharp-nomodel"; then
       peak=$mdir/${label}_peaks.narrowPeak
    else
       peak=$mdir/${label}_peaks.broadPeak
    fi
    peakarray="$peakarray -f $peak -l $label"
    peaklist_simpson="$peaklist_simpson $peak"
done < $samplepairlist

## bedtools jaccard
head=$jacdir/jaccard.all
jaccard.pl $peakarray -n 10000000 > $head.tsv
Rscript /opt/Churros/matrix_heatmap.R -i=$head.tsv -o=$head -clst -fsize=1 -method=ward.D2 -k=2

head=$jacdir/jaccard.top2000
jaccard.pl $peakarray -n 2000 > $head.tsv
Rscript /opt/Churros/matrix_heatmap.R -i=$head.tsv -o=$head -clst -fsize=1 -method=ward.D2 -k=2

## peak overlap simpson
simpdir=$odir/Peak_Number_overlap
simpson_peak.sh -p $ncore -d $simpdir $peaklist_simpson
simpson_peak.sh -p $ncore -n 2000 -d $simpdir $peaklist_simpson

echo "done."
