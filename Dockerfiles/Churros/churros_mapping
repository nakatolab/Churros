#!/bin/bash
cmdname=`basename $0`
function usage()
{
    echo "$cmdname" '[options] <command> <samplelist> <build> <Ddir>' 1>&2
    echo '   <command>:' 1>&2
    echo '      exec: map & postprocess' 1>&2
    echo '      map: mapping reads' 1>&2
    echo '      postprocess: QC and generate wig files by ssp and parse2wig;' 1>&2
    echo '      stats: show mapping/QC stats;' 1>&2
    echo '      header: print header line of the stats' 1>&2
    echo '   <fastq>: fastq file' 1>&2
    echo '   <prefix>: output prefix' 1>&2
    echo '   <build>: genome build (e.g., hg38)' 1>&2
    echo '   <Ddir>: directory of bowtie|bowtie2 index' 1>&2
    echo '   Options:' 1>&2
    echo '      -c: output as CRAM format (defalt: BAM)' 1>&2
    echo '      -b: binsize of parse2wig+ (defalt: 100)' 1>&2
    echo '      -z: peak file for FRiP calculation (BED format, default: default MACS2 without control)' 1>&2
    echo '      -m: consider genome mappability in parse2wig+' 1>&2
    echo '      -k [36|50]: read length of mappability file (default:50)' 1>&2
    echo '      -n: omit ssp' 1>&2
    echo '      -C: for SOLiD data (csfastq, defalt: fastq)' 1>&2
    echo '      -f: output format of parse2wig+ (default: 3)' 1>&2
    echo '               0: compressed wig (.wig.gz)' 1>&2
    echo '               1: uncompressed wig (.wig)' 1>&2
    echo '               2: bedGraph (.bedGraph)' 1>&2
    echo '               3: bigWig (.bw)' 1>&2
    echo '      -P "param": parameter of bowtie|bowtie2 (shouled be quated)' 1>&2
    echo '      -p : number of CPUs (default: 12)' 1>&2
    echo '      -D : directory for execution (defalt: "Churros_result")' 1>&2
    echo "   Example:" 1>&2
    echo "      For single-end: $cmdname exec chip.fastq.gz chip hg38 Database/Ensembl-GRCh38" 1>&2
    echo "      For paired-end: $cmdname exec \"-1 chip_1.fastq.gz -2 chip_2.fastq.gz\" chip hg38 Database/Ensembl-GRCh38" 1>&2
}

bowtieparam=""
mp=0
nopp=0
format=BAM
bamdir=bam
of=3
binsize=100
k=50
peak=""
ncore=12
csfasta=0
chdir="Churros_result"

while getopts cCb:z:a:mk:nf:P:p:D: option
do
    case ${option} in
        c) format=CRAM
           bamdir=cram
           ;;
        C) csfasta=1;;
        b) binsize=${OPTARG};;
        z) peak=${OPTARG}
           if test ! -e $peak; then
               echo "Error: $peak does not exist (-b)."
               exit 1
           else
               peak="--bed $peak"
           fi
           ;;
        m) mp=1;;
        k) k=${OPTARG};;
        n) nopp=1;;
        f) of=${OPTARG};;
        P) bowtieparam=${OPTARG};;
        p) ncore=${OPTARG};;
        D) chdir=${OPTARG};;
        *)
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
  usage
  exit 1
fi

if test $1 = "header"; then
    if test $mp -eq 1; then
	echo -e "\tSample\tSequenced reads	Mapped 1 time	%	Mapped >1 times	%	Mapped all	%	Unmapped	%	Nonredundant	Redundant	Complexity for10M	Tested reads	Read depth	Genome coverage	reads in peaks	FRiP	GC summit	read length	fragment length	SSP-NSC	SSP-RLSC	SSP-RSC	Background uniformity	FCS(read)	FCS(flen)	FCS(1k)	FCS(10k)	FCS(100k)"
    else
	echo -e "\tSample\tSequenced reads	Mapped 1 time	%	Mapped >1 times	%	Mapped all	%	Unmapped	%	Nonredundant	Redundant	Complexity for10M	Tested reads	Read depth	Genome coverage	reads in peaks	FRiP	read length	fragment length	SSP-NSC	SSP-RLSC	SSP-RSC	Background uniformity	FCS(read)	FCS(flen)	FCS(1k)	FCS(10k)	FCS(100k)"
    fi
    exit
fi

if [ $# -ne 4 ]; then
  usage
  exit 1
fi

command=$1
samplelist=$2
build=$3
Ddir=$4

if test $csfasta -eq 1; then
    post="-bowtie"`echo $bowtieparam | tr -d ' '`
else
    post="-bowtie2"`echo $bowtieparam | tr -d ' '`
fi

gt=$Ddir/genometable.txt
if test ! -e $gt; then
    echo "Error: $gt does not exist. Please make it by 'download_genomedata.sh'."
    exit 1
fi


func_map(){
    prefix=$1
    fq1=$2
    fq2=$3
    head=$prefix$post-$build

    if test "$fq2" = ""; then
	fastq=$fq1
    else
	fastq="\-1 $fq1 \-2 $fq2"
    fi

    if test $csfasta -eq 1; then
       echo "mapping by bowtie: $fastq"
       if test $format = "CRAM"; then
            bowtie.sh -t csfastq -c -p $ncore -P "$bowtieparam" -D $chdir "$fastq" $prefix $build $Ddir
       else
            bowtie.sh -t csfastq    -p $ncore -P "$bowtieparam" -D $chdir "$fastq" $prefix $build $Ddir
       fi
    else
       echo "mapping by bowtie2: $fastq"
       if test $format = "CRAM"; then
           bowtie2.sh -c -p $ncore -P "$bowtieparam" -D $chdir "$fastq" $prefix $build $Ddir
       else
           bowtie2.sh    -p $ncore -P "$bowtieparam" -D $chdir "$fastq" $prefix $build $Ddir
       fi
    fi
    echo "done."
}

if test $command = "map" -o $command = "exec"; then
    while read LINE; do
        LINE=($LINE)
        prefix=${LINE[0]}
        fq1=${LINE[1]}
        fq2=${LINE[2]}
        func_map $prefix $fq1 $fq2
    done < $samplelist
fi


func_postprocess(){
    prefix=$1
    fq1=$2
    fq2=$3
    head=$prefix$post-$build

    if test "$fq2" = ""; then
        pair=""
    else
        pair="-p"
    fi

    parseparam="-D $chdir -t $ncore $pair -f $of"
    if test $mp -eq 1; then
        parseparam="$parseparam -m -k $k"
    else
        parseparam=$parseparam
    fi

    if test $format = "CRAM"; then
        mapfile=$chdir/$bamdir/$head.sort.cram
    else
        mapfile=$chdir/$bamdir/$head.sort.bam
    fi

    if test $nopp != 1; then
        echo -e "churros_mapping: quality check by SSP..."
        ssp.sh -t $ncore $pair -D $chdir $mapfile $head $build $gt;
        echo "done."
        flen=`cut -f5 $chdir/sspout/$head.stats.txt | tail -n1`
        parseparam="$parseparam -l $flen"
    fi

    if test $format = "CRAM"; then
       echo "parse mapfile by parse2wig+..."
       parse2wig+.sh $parseparam -b $binsize $peak $mapfile $head $build $Ddir
    else
       if test "$peak" != ""; then
           echo "parse mapfile by parse2wig+..."
           parse2wig+.sh $parseparam -b $binsize $peak $mapfile $head $build $Ddir
       else
           macspeak="$chdir/macs/${prefix}_forFRiP_peaks.narrowPeak"
           if test ! -e $macspeak; then
               echo "execute MACS2 without Input to estimate FRiP..."
               macs.sh -d $chdir/macs $mapfile none ${prefix}_forFRiP $build sharp-nomodel
               rm $chdir/macs/${prefix}_forFRiP_peaks.xls
           fi
           echo "parse mapfile by parse2wig+..."
           parse2wig+.sh $parseparam -b $binsize -z $macspeak $mapfile $head $build $Ddir
	   rm $chdir/macs/${prefix}_forFRiP_peaks*
       fi
    fi
    echo "done."
}

if test $command = "postprocess" -o $command = "exec"; then
    while read LINE; do
        LINE=($LINE)
        prefix=${LINE[0]}
        fq1=${LINE[1]}
        fq2=${LINE[2]}
        func_postprocess $prefix $fq1 $fq2
    done < $samplelist
fi


func_stats(){
    prefix=$1
    head=$prefix$post-$build

    logdir=$chdir/log
    if test $csfasta -eq 1; then
        a=`parsebowtielog.pl $pair $logdir/bowtie/$prefix.txt | grep -v Sample`
    else
        a=`parsebowtielog2.pl $pair $logdir/bowtie2/$prefix.txt | grep -v Sample`
    fi
    b=`cat $logdir/parse2wig+/parsestats-$head.$binsize | grep -v Sample | cut -f6,7,8,9`
    gcov=`cat $logdir/parse2wig+/parsestats-$head.$binsize | grep -v Sample | cut -f10`
    if test $mp -eq 1; then
        b2=`cat $logdir/parse2wig+/parsestats-$head.GC.100000 | grep -v Sample | cut -f11,12,13,14`
    else
        b2=`cat $logdir/parse2wig+/parsestats-$head.$binsize | grep -v Sample | cut -f11,12,13`
    fi

    echo -en "$a\t$b\t$gcov\t$b2\t$c"

    if test $nopp != 1; then
        echo -en "`tail -n1 $chdir/sspout/$head.stats.txt | cut -f4,5,6,7,8,9,10,11,12,13,14`"
    fi
    echo ""
}

if test $command = "stats"; then
    while read LINE; do
        LINE=($LINE)
        prefix=${LINE[0]}
        func_stats $prefix
    done < $samplelist
fi
