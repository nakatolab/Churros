#!/bin/bash
# Copyright(c) Ryuichiro Nakato <rnakato@iqb.u-tokyo.ac.jp>
# All rights reserved.

cmdname=`basename $0`
function usage()
{
    echo "$cmdname" '[options] <command> <samplelist> <build> <Ddir>' 1>&2
    echo '   <command>:' 1>&2
    echo '      exec: map & postprocess' 1>&2
    echo '      map: mapping reads' 1>&2
    echo '      postprocess: QC and generate wig files by ssp and parse2wig;' 1>&2
    echo '      stats: show mapping/QC stats;' 1>&2
    echo '      header: print header line of the stats' 1>&2
    echo '   <samplelist>: Samplelist file' 1>&2
    echo '   <build>: Genome build (e.g., hg38)' 1>&2
    echo '   <Ddir>: Directory of bowtie|bowtie2 index' 1>&2
    echo '   Options:' 1>&2
    echo '      -c: Output as CRAM format (defalt: BAM)' 1>&2
    echo '      -b: Binsize of parse2wig+ (defalt: 100)' 1>&2
    echo '      -z: Peak file for FRiP calculation (BED format, default: MACS2 without control)' 1>&2
    echo '      -k [28|36|50]: Read length for mappability file (default:50)' 1>&2
    echo '      -n: Do not consider genome mappability' 1>&2
    echo '      -N: Do not filter PCR duplication' 1>&2
    echo '      -C: For SOLiD data (csfastq, defalt: fastq)' 1>&2
    echo '      -f: Output format of parse2wig+ (default: 3)' 1>&2
    echo '               0: compressed wig (.wig.gz)' 1>&2
    echo '               1: uncompressed wig (.wig)' 1>&2
    echo '               2: bedGraph (.bedGraph)' 1>&2
    echo '               3: bigWig (.bw)' 1>&2
    echo '      -P "param": Additional parameter for bowtie|bowtie2 (shouled be quated)' 1>&2
    echo '      -Q "param": Additional parameter for parse2wig+ (shouled be quated)' 1>&2
    echo '      -p: Number of CPUs (default: 12)' 1>&2
    echo '      -w: Specify paired-end mode (default: judged based on the samplelist)' 1>&2
    echo '      -D: directory for execution (defalt: "Churros_result")' 1>&2
    echo "   Example:" 1>&2
    echo "      For single-end: $cmdname exec chip.fastq.gz chip hg38 Referencedata_hg38" 1>&2
    echo "      For paired-end: $cmdname exec \"-1 chip_1.fastq.gz -2 chip_2.fastq.gz\" chip hg38 Referencedata_hg38" 1>&2
}

bowtieparam=""
parse2wigparam=""
mp=1
format=BAM
bamdir=bam
of=3
binsize=100
k=50
peak=""
ncore=12
csfasta=0
nofilter=0
chdir="Churros_result"
pairedend=0

while getopts cCb:z:nNa:k:f:wP:Q:p:D: option
do
    case ${option} in
        c) format=CRAM
           bamdir=cram
           ;;
        C) csfasta=1;;
        b) binsize=${OPTARG}
           isnumber.sh $binsize "-b" || exit 1
           ;;
        z) peak=${OPTARG}
           if test ! -e $peak; then
               echo "Error: $peak does not exist (-b)."
               exit 1
           else
               peak="--bed $peak"
           fi
           ;;
        n) mp=0;;
        N) nofilter=1;;
        k) k=${OPTARG}
           isnumber.sh $k "-k" || exit 1
           ;;
        f) of=${OPTARG}
           isnumber.sh $of "-f" || exit 1
           ;;
        w) pairedend=1;;
        P) bowtieparam=${OPTARG};;
        Q) parse2wigparam=${OPTARG};;
        p) ncore=${OPTARG}
           isnumber.sh $ncore "-p" || exit 1
           ;;
        D) chdir=${OPTARG};;
        *)
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

if [ $# -lt 3 ]; then
  usage
  exit 1
fi

command=$1
samplelist=$2
build=$3
chdir=$chdir/$build

if test $pairedend -eq 1; then
    pair="-p"
else
    while read -r LINE || [ -n "$LINE" ]; do
        LINE=($LINE)
        prefix=${LINE[0]}
        fq1=${LINE[1]}
        fq2=${LINE[2]}
        if test "$fq2" = ""; then
            pair=""
        else
            pair="-p"
        fi
    done < $samplelist
fi

if test $1 = "header"; then
    while read -r LINE || [ -n "$LINE" ]; do
        LINE=($LINE)
        prefix=${LINE[0]}
        fq1=${LINE[1]}
        fq2=${LINE[2]}

        if [[ "$fq1" =~ \.(bam|sam|cram)$ ]]; then
            is_bam=1
        else
            is_bam=0
        fi

        logdir=$chdir/log
        statsdir=$chdir/stats
        if test $is_bam -eq 1; then
            a=`cat $statsdir/$prefix.stats.singleline.GC.tsv | head -n1 | cut -f1,2`
        else
            if test $csfasta -eq 1; then
                a=`parsebowtielog.pl $pair $logdir/bowtie/$prefix.txt | head -n1 | cut -f2-`
            else
                a=`parsebowtielog2.pl $pair $logdir/bowtie2/$prefix.txt | head -n1 | cut -f2-`
            fi
        fi

        if test $mp -eq 1; then
            b=`cat $statsdir/$prefix.stats.singleline.GC.tsv | head -n1 | cut -f6,7,8,9,10,11,12,13,14`
        else
            b=`cat $statsdir/$prefix.stats.singleline.tsv | head -n1 | cut -f6,7,8,9,10,11,12,13`
        fi

        echo -en "$a\t$b\t"
        echo -e "`head -n1 $chdir/sspout/$prefix.stats.txt | cut -f4,5,6,7,8,9,10,11,12,13,14`"
        exit
    done < $samplelist
fi

if [ $# -ne 4 ]; then
  usage
  exit 1
fi

Ddir=$4

ex(){ echo $1; eval $1; }

gt=$Ddir/genometable.txt
mptable=$Ddir/mappability_Mosaics_${k}mer/map_fragL150_genome.txt

if test ! -e $gt; then
    echo "Error: $gt does not exist. Please make it by 'download_genomedata.sh'."
    exit 1
fi

func_map(){
    prefix=$1
    fq1=$2
    fq2=$3
    head=$prefix

    if test "$fq2" = ""; then
	    fastq=$fq1
    else
	    fastq="\-1 $fq1 \-2 $fq2"
    fi

    if test $csfasta -eq 1; then
        echo "mapping by bowtie: $fastq..."
        if test $format = "CRAM"; then
                ex "bowtie.sh -t csfastq -c -p $ncore -P \"$bowtieparam\" -D $chdir \"$fastq\" $prefix $Ddir"
        else
                ex "bowtie.sh -t csfastq    -p $ncore -P \"$bowtieparam\" -D $chdir \"$fastq\" $prefix $Ddir"
        fi
    else
        echo "mapping by bowtie2: $fastq..."
        if test $format = "CRAM"; then
            cramparam="-c"
        else
            cramparam=""
        fi
        if test "$bowtieparam" != ""; then
            p_param="-P \"$bowtieparam\""
        else
            p_param=""
        fi
        ex "bowtie2.sh $cramparam -p $ncore $p_param -D $chdir \"$fastq\" $prefix $Ddir"
    fi
}

if test $command = "map" -o $command = "exec"; then
    while read -r LINE || [ -n "$LINE" ]; do
        LINE=($LINE)
        prefix=${LINE[0]}
        fq1=${LINE[1]}
        fq2=${LINE[2]}
        func_map $prefix $fq1 $fq2
    done < $samplelist
fi

func_postprocess(){
    head=$1
    fq1=$2
    fq2=$3
    mapfile=$4

    parseparam="-a -D $chdir -s stats -o bigWig -t $ncore $pair -f $of"
    if test $mp -eq 1; then
        parseparam="$parseparam -m -k $k"
    fi
    if test "$nofilter" -eq 1; then
        parseparam="$parseparam -n"
    fi

    echo -e "churros_mapping: quality check by SSP..."
    ssp.sh -t $ncore $pair -D $chdir $mapfile $head $build $gt $mptable
    if ! test -e $chdir/sspout/$head.stats.txt; then
        echo "Error: $chdir/sspout/$head.stats.txt was not created correctly."
        exit 1
    fi
    flen=`cut -f5 $chdir/sspout/$head.stats.txt | tail -n1`
    if test "$parse2wigparam" != ""; then
       parseparam="$parseparam -l $flen -P \"$parse2wigparam\""
    else
       parseparam="$parseparam -l $flen"
    fi

    logdir=$chdir/log/parse2wig+
    mkdir -p $logdir
    if test $format = "CRAM"; then
       ex "parse2wig+.sh $parseparam -b $binsize $peak $mapfile $head $build $Ddir >& $logdir/$head.txt"
    else
       if test "$peak" != ""; then
           ex "parse2wig+.sh $parseparam -b $binsize $peak $mapfile $head $build $Ddir >& $logdir/$head.txt"
       else
	       mkdir -p $chdir/tmp
           macspeak="$chdir/tmp/${prefix}_forFRiP_peaks.narrowPeak"
           if test ! -e $macspeak; then
               echo "execute MACS2 without Input to estimate FRiP..."
               macs.sh -d $chdir/tmp $mapfile none ${prefix}_forFRiP $build sharp-nomodel
           fi
           ex "parse2wig+.sh $parseparam -b $binsize -z $macspeak $mapfile $head $build $Ddir >& $logdir/$head.txt"
       fi
    fi
    echo "done."
}

if test $command = "postprocess" -o $command = "exec"; then
    while read -r LINE || [ -n "$LINE" ]; do
        LINE=($LINE)
        prefix=${LINE[0]}
        fq1=${LINE[1]}
        fq2=${LINE[2]}

        if [[ "$fq1" =~ \.(bam|sam|cram)$ ]]; then
	        mkdir -p $chdir/$bamdir

            # fq1 が絶対パスか相対パスかを判定して、絶対パスを mapfile に設定
            if [[ "$fq1" = /* ]]; then
                mapfile=$fq1  # 絶対パスならそのまま
            else
                mapfile=$(pwd)/$fq1  # 相対パスなら絶対パスに変換
            fi

            ln -sf $mapfile $chdir/$bamdir/$prefix.sort.bam
        elif test $format = "CRAM"; then
            mapfile=$chdir/$bamdir/$prefix.sort.cram
        else
            mapfile=$chdir/$bamdir/$prefix.sort.bam
        fi

        func_postprocess $prefix "$fq1" "$fq2" $mapfile
    done < $samplelist
fi

func_stats(){
    head=$1
    fq1=$2
    fq2=$3

    if [[ "$fq1" =~ \.(bam|sam|cram)$ ]]; then
        is_bam=1
    else
        is_bam=0
    fi

    logdir=$chdir/log
    statsdir=$chdir/stats
    if test $is_bam -eq 1; then
        echo -en "$head\t"
        a=`cat $statsdir/$head.stats.singleline.GC.tsv | grep -v Sample | cut -f2`
    else
        if test $csfasta -eq 1; then
            a=`parsebowtielog.pl $pair $logdir/bowtie/$prefix.txt | grep -v Sample | cut -f2-`
        else
            a=`parsebowtielog2.pl $pair $logdir/bowtie2/$prefix.txt | grep -v Sample | cut -f2-`
        fi
    fi

    if test $mp -eq 1; then
        b=`cat $statsdir/$head.stats.singleline.GC.tsv    | grep -v Sample | cut -f6,7,8,9`
        gcov=`cat $statsdir/$head.stats.singleline.GC.tsv | grep -v Sample | cut -f10`
        b2=`cat $statsdir/$head.stats.singleline.GC.tsv | grep -v Sample | cut -f11,12,13,14`
    else
        b=`cat $statsdir/$head.stats.singleline.tsv    | grep -v Sample | cut -f6,7,8,9`
        gcov=`cat $statsdir/$head.stats.singleline.tsv | grep -v Sample | cut -f10`
        b2=`cat $statsdir/$head.stats.singleline.tsv | grep -v Sample | cut -f11,12,13`
    fi

    echo -en "$a\t$b\t$gcov\t$b2\t"
    echo -en "`tail -n1 $chdir/sspout/$head.stats.txt | cut -f4,5,6,7,8,9,10,11,12,13,14`"
    echo ""
}

if test $command = "stats"; then
    while read -r LINE || [ -n "$LINE" ]; do
        LINE=($LINE)
        prefix=${LINE[0]}
        fq1=${LINE[1]}
        fq2=${LINE[2]}
        func_stats $prefix "$fq1" "$fq2"
    done < $samplelist
fi